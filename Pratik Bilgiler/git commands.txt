***************************************** GİT VERSION CONTROL  (GİT BASH)  START**************************************************
-> ilk olarak git kurulmalıdır  "git download" 

 -> Kurulum yapıldıktan sonra tüm işletim sistemleri için geçerli olan "Git Bash" terminali üzerinden bazı komut kullanım örnekleri

	• "ls" komutu bulunduğun klasörün içindekileri gösterir
	• "pwd" güncel olarak bukunduğun klasörü gösteririr
	• "cd Documents"  Documents klaösrü içine gir demektir (klasörün ilk bir kaç harfini yazıp sonrasında TAB tuşuna basılırsa otomatik tamamlar)
	• "cd .." bir önceki klasöre git demektir
	• "clear" terminal ekranını temizler

    *     "touch not.txt"  bulunuduğun klasör içinde text dosyası oluşturur
    *      "rm touch.txt"  text dosyasını siler (rm sadece dosyaları siler)
    *      "mkdir OrnekKlasor"  OrnekKlasor adlı klasör oluşturur
    *      "rm -rf  OrnekKlasor"  klasör silmek için bu komut


   *   "git"  git ile alakalı komutları gösteririr
   *   "git version"  git versionu nu gösterir
   *    "git status" komutu ile içinde bulunduğun klasörün git ile bağlantısı olup olmadığı kontrol edilir

-> Kullanıcı Adı Soyadı ve Email bilgilerini git'e tanımlama

    *     git config --global user.name "Emre Aktürk" ile kulanıcı adı oluşturabilirsin
    *     git config --global user.name   kullanıcı adını öğrenebilirsin
	• git config --global user.email "akturk_emre@hotmail.com"
	• git config --global user.email 

-> Örnek Proje Açma

	• "mkdir GitKursu"  her hangibir yerde ilk olarak klasör oluşturulur
	• "git status" komutu ile o klasörün git ile bağlantısı olup olmadığı, bağlantı var ise herhangibir bekleyen işlem var mı tüm durumlar kontrol edilir
	•  "git init" ile bulunduğun klasör git'e bağlanmış olur.  Bulunduğu konumda git repository si oluşturur.
	• "touch test.txt" ile text dosyası ekledik
	• "git add test.txt" ilgili dosya ile alakalı tüm değişiklikleri staged(commit öncesi) alanına taşır
	
-> gitignore dosyası işlmeleri

	• "touch .gitignore" bulunduğun klasör içinde girignore doyası oluşur
	• Gitignore dosyasına eklediğimiz dosya ismilerine göre takibi engeller

-> Branch işlemleri

	• "git branch pilot" master üzerinden yeni branch oluşturur
	• "git branch" branch leri listeler
	• "git switch pilot" ya da "git checkout pilot" pilot branch ine geçer
	• "git branch -d branchName"   braanch adına göre o branch I siler

 Fast forwarding : master branch'inin son halinden yeni bir branch alınıp, yeni geliştirmeler yapıldıktan sonra tekrardan master branch'e merge etme işlemidir.

-> Stash işlemleri

	• " git stash"  stash oluşturur (yapılan son değişikliği daha sonra kullanmak üzere saklamaktır.)

	•  git stash save -a 'message'  yapılan son değişiklik için açıklamalı stash oluşturur 

	•  "git stash list" stash'leri listeler

	•  "git stash apply stash@{n}" belli bir stash'i listeden silmeden uygular

	•  "git stash pop stash@{n}"  belli bir stash'i listeden siler ve uygular

	• "git stash pop"  en sondaki stash'i siler ve uygular

	• "git stash clear"  tüm stash listesini siler



***************************************** GİT VERSION CONTROL  (GİT BASH)  END**************************************************
********************* Commands ********************* 

-> Staged & Unstaged 
-> Amend 
-> Revert
-> Stash 
    * Örneğin; Main branch de değişiklik yaptın. Fakat o değişiklik  yeni oluşturduğun "newBranch" de olması gerekiyordu.
    * O değişikliği stash'e attıktan sonra , oluşturduğun yeni branch e aktarabilirsin. Aktarım yapıldıktan sonra stach silinir otomatik
-> Cherry Pick nedir
    * Başka bir branch te yapılan commit, farklı branch'e bu komut sayesinde taşınabilir

********************** Eklentiler ********************

-> "GitMerger" eklentisi, merge işlemleri için
-> "Git History" eklentisi, commit tarihçesi için 


********************** Visual Studio Code İşlemleri *********************

-> Branch silmek için Arama kısmına    "> Git:"  ifadesi yazınca bütün işlemler çıkıyor
     örnek;   Git:Commit
              Git:Merge Branch  


***********************  Full Git Commands ****************

 # git init

 Bulunduğu konumda git repository si oluşturur.

 # git add .

 tüm değişiklikleri staged(commit öncesi) alanına taşır

 # git add [file]

 ilgili dosya ile alakalı tüm değişiklikleri staged(commit öncesi) alanına taşır

 # git commit -m "yazılacak yorum"

 staged alanındaki değişikleri version layarak repo'ya taşır 
 
 # git commit -am "yazılacak yorum"

 hem add (git add) hemde commit (git commit) işlemini yapar

 # git status

 henüz commit edilmemiş yeni veya güncellenen dosyaları listeler

 # git log

 tüm commit geçmişini görüntüler

 # git log --pretty=oneline

 
 tüm commit geçmişini daha sade görüntüler

 # git show [commitnumarası] : [file]

 belirli bir commit detayını görüntüler 

 # git checkout [file]

 Staged alanına eklenmemiş son yapılan değişikliği geri almak içindir. (git add komutunu çalıştırmadan önceki değişiklikleri)

 # git reset [file]

 Staged alanına alınmış yani (git add) komutu çalıştırılmış son yapılan değişiklikleri, staged öncesine almak içinidir. Sonrasında (git checkout) çalışırılırsa değişiklikler tamamen geri alınmış olur

 # git reset hard

 Staged alanına alınmış yani (git add) komutu çalıştırılmış son yapılan değişiklikleri, direk siler

 # git branch [newBranch]

 Verilen isim ile yeni bir branch oluşturur

 # git branch 

 branch leri listeler 

 # git branch [-av]

 -av ile remote branch leri de listeler

 # git branch -d [branchName]

 branch siler

# git checkout [branchName]

ismi verilen branch e geçiş yapar

# git merge [BranchB]

içinde bulunulan branch e ismi verilen branch i merge eder

# git tag 'tagName'

son commit'e tag verir

# git tag 

tag'leri listeler

# git show 'tagName'

tag verilmiş commit'i inceler

# git tag -a 'newTag' -m 'message' [commitId]

eski bir commit'e tag verir

# git tag -d v.1.0

v.1.0 isimli tag'i siler

# git stash 

stash oluşturur (yapılan son değişikliği daha sonra kullanmak üzere saklamaktır.)

# git stash save -a 'message'

yapılan son değişiklik için açıklamalı stash oluşturur 

# git stash list

stash'leri listeler

# git stash apply "stash@{n}"

belli bir stash'i veya son stash'i listeden silmeden uygular

# git stash pop "stash@{n}"

belli bir stash'i veya son stash'i listeden siler ve uygular

# git drop drop "stash@{n}"

belli bir stash'i veya son stash'i listeden siler 

# git rm --cached  index2.html 
 
Herhangibir dosyayı commit ettikten sonra  .gitignore a eklerseniz yine değişiklikleri takip edecektir. Bu durumu engellemek için aşağıdaki komut çalıştır; 



 **********************  .gitignore dosyası tanımlamaları ****************


-> Tam ismi belli dosyayı takip etmemek.

#  index.html

 -> bin klasörü altındaki debug klasörünü takip etmemek

#   bin/debug

-> bin klaösürünü takip etmemek

#   bin/

-> .css uzantılı dosyaları takip etmemek

#   *.css

-> bin klasörü altındaki .css uzantılı dosyaları takip etmemek

# bin/*.css

-> bin klasörü altındaki herhangibir klasörünü içindeki  .css uzantılı dosyaları takip etmemek

# bin/*/*.css

->  ilk harfi "B" ya da "b" ile başlayan "bin" isimli klasörü takip etmemek

# [Bb]in/

-> gitignore dosyasına yazdıktan sonra.. terminalde 
Ctrl + ile açıp, "git rm --cached  <dosya yolu>"  komutu ile takibi engellenir


********** Git Commands Çalıştırma Araçları ***********

-> Git Bash
-> Power Shell
-> Commmand Prop

Bunlardan birini açtıktan sonra;
 
 -> "cd .."  ile bir üst klasöre
 -> "cd <Klasörİsmi>"  ile içindeki bir klasöre girebilirsin
 -> bir iki harf yazıp tab tuşuna basarsan otomatik tamamlar 
 -> "dir" komutu bulunduğun dizindeki tüm klasörleri listeler 
 -> Komut çalıştırma araçları üzerinde herhangibir şeyin üzerinde sağ tık yaparsan kopyalar
 -> Yapıştıracağın yere tekrardan sağ tık yaparsan, yapıştırır.
 